name: Deploy to Pantheon
on: push
env:
  TZ: "/usr/share/zoneinfo/America/New_York"
  TERM: dumb
  TEMP_DIR: "../"
  CMS_PLATFORM: D9
  ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
  ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  GITHUB_TOKEN: ${{ github.token }}
  TERMINUS_TOKEN: ${{ secrets.TERMINUS_TOKEN }}
  TERMINUS_SITE: "panth-github-actions"
  TEST_SITE_NAME: "panth-github-actions"
  CI_BRANCH: ${{ github.head_ref || github.ref_name }}
  COMMIT_SHA: ${{ github.sha }}
  CI_BUILD_NUMBER: ${{ github.run_number }}
  DEFAULT_SITE: "panth-github-actions"
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  GITHUB_OWNER: ${{ github.repository_owner }}
  CI_PROJECT_NAME: ${{ github.repository }}
  # PR_NUMBER: ${{ github.event.number }} # need to use gh cli
  CI_PULL_REQUEST: ${{ github.event.pull_request._links.html.href }}
  DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        ref: ${{ github.head_ref || github.ref_name }}

    - uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.PANTHEON_SSH_KEY }}
        config: ${{ secrets.SSH_CONFIG }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    # Initiate Env Variables.
    - name: Setup Environment Vars
      run: ./.ci/scripts/env/init-env-vars.sh

    - uses: hmarr/debug-action@v2


    # Install Terminus.
    - name: Install Terminus
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      uses: pantheon-systems/terminus-github-actions@main
      with:
        pantheon-machine-token: ${{ secrets.PANTHEON_MACHINE_TOKEN }}

    - name: PWD
      run: pwd

    # Install Terminus Build Tools.
    - name: Install Terminus Build Tools
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      run: terminus self:plugin:install terminus-build-tools-plugin

    # Pantheon Cleanup.
    - name: Prepare and clean up Pantheon
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      run: ./.ci/scripts/env/prepare-for-pantheon.sh





    - name: Update Ignore File.
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      run: terminus build:gitignore:cut

    - name: Use Node.js 14.
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      uses: actions/setup-node@v3
      with:
        node-version: 14.19.0

    # Cache vendor folder
    - name: Cache vendor folder
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      uses: actions/cache@v2
      env:
        cache-name: cache-vendor
      with:
        path: ./vendor
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}

    - name: node builder
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      run: |
        npm install
        npm run out
        gulp build


    - name: pre-deployer
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      env:
        pantheon_repo: '${{ secrets.PANTHEON_REPO }}'
      run: |
        BASE_BRANCH=${GITHUB_REF##*/}
        git remote add pantheon $pantheon_repo
        git config user.mail "bc-bot@bluecadet.com"
        git config user.name "Bluecadet Bot"
        git rm `cat .gitignore-panth | sed 's/^\///g'`
        cat .gitignore-panth >> .gitignore

    - name: deployer
      if: ${{ env.SHOULD_BUILD_JOB == 'true' }}
      run: ./.ci/scripts/env/deploy-to-pantheon.sh

    # - name: Wait for Pantheon to fully sync code
    #   run: terminus workflow:wait panth-github-actions.dev --max=6000




    # - name: pre-deployer
    #   env:
    #     pantheon_repo: '${{ secrets.PANTHEON_REPO }}'
    #   run: |
    #     BASE_BRANCH=${GITHUB_REF##*/}
    #     git remote add pantheon $pantheon_repo
    #     git config user.mail "bc-bot@bluecadet.com"
    #     git config user.name "Bluecadet Bot"
    #     git rm `cat .gitignore-panth | sed 's/^\///g'`
    #     cat .gitignore-panth >> .gitignore
    #     git add .
    #     git commit -q -m 'Build assets for dev.'
    #     git push --force pantheon HEAD:refs/heads/$BASE_BRANCH




  # visual_regression_test:
  #   container:
  #     image: backstopjs/backstopjs:6.1.0
  #     options: --user root
  #   runs-on: ubuntu-latest
  #   # if: ${{ github.ref != 'refs/heads/master' }}
  #   # needs: [build]
  #   steps:

  #   - name: Checkout
  #     uses: actions/checkout@v2
  #     with:
  #       ref: ${{ github.head_ref || github.ref_name }}
  #       fetch-depth: 0

  #   # Initiate Env Variables.
  #   - name: Setup Environment Vars
  #     run: ./.ci/scripts/env/init-env-vars.sh

  #   - uses: hmarr/debug-action@v2

    # - name: Set bash_env env var
    #   run: echo BASH_ENV=${RUNNER_TEMP}/bash_env.txt >> $GITHUB_ENV

    # - name: Cache bash_env.txt
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-bash-env
    #   with:
    #     path: ${{ env.BASH_ENV }}
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_number }}
    #     restore-keys: |
    #       ${{ runner.os }}-build-${{ env.cache-name }}-
    #       ${{ runner.os }}-build-
    #       ${{ runner.os }}-

    # - name: Cache composer cache
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-composer-cache
    #   with:
    #     path: ~/.composer/cache
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-build-${{ env.cache-name }}-
    #       ${{ runner.os }}-build-
    #       ${{ runner.os }}-

    # - name: Cache vendor folder
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-vendor
    #   with:
    #     path: ./vendor
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}

    # - name: Cache web folder
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-web
    #   with:
    #     path: ./web
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_number }}

    # - name: Cache drush folder
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-drush
    #   with:
    #     path: ./drush
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}

    # - name: prepare-environment-vars
    #   run: |
    #     source $BASH_ENV

    # - name: visual regression test
    #   run: ./.ci/test/visual-regression/run

    - name: Install Backstopjs
      run: npm install -g backstopjs

    # If we need to login, set urls.
    - name: Setup authorization urls
      run: ./.ci/scripts/tests/backstopjs-auth-url.sh

    - name: visual regression test
      run: ./.ci/scripts/tests/backstopjs-test.sh
