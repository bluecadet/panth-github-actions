name: Deploy to Pantheon
on:
  push:
    branches:
      - 'master'
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.PANTHEON_SSH_KEY }}
        config: ${{ secrets.SSH_CONFIG }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    # Install Terminus.
    - name: Install Terminus
      uses: pantheon-systems/terminus-github-actions@main
      with:
        pantheon-machine-token: ${{ secrets.PANTHEON_MACHINE_TOKEN }}

    - name: Install Terminus Build Tools
      run: terminus self:plugin:install terminus-build-tools-plugin

    # Check Terminus works.
    - name: Update Ignore File.
      run: terminus build:gitignore:cut

    - name: Use Node.js 14.
      uses: actions/setup-node@v3
      with:
        node-version: 14.19.0

    # Cache vendor folder
    - name: Cache vendor folder
      uses: actions/cache@v2
      env:
        cache-name: cache-vendor
      with:
        path: ./vendor
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}

    - name: node builder
      run: |
        npm install
        npm run out
        gulp build

    - name: deployer
      env:
        pantheon_repo: '${{ secrets.PANTHEON_REPO }}'
      run: |
        git remote add pantheon $pantheon_repo
        git config user.mail "bc-bot@bluecadet.com"
        git config user.name "Bluecadet Bot"
        git rm `cat .gitignore-panth`
        cat .gitignore-panth >> .gitignore
        git add .
        git commit -q -m 'Build assets for dev.'
        git push --force pantheon HEAD:master

    - name: Wait for Pantheon to fully sync code
      run: terminus workflow:wait panth-github-actions.dev --max=6000

  visual_regression_test:
    container:
      image: backstopjs/backstopjs:6.1.0
      options: --user root
    runs-on: ubuntu-latest
    # if: ${{ github.ref != 'refs/heads/master' }}
    # needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 0

      # - name: Set bash_env env var
      #   run: echo BASH_ENV=${RUNNER_TEMP}/bash_env.txt >> $GITHUB_ENV

      # - name: Cache bash_env.txt
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-bash-env
      #   with:
      #     path: ${{ env.BASH_ENV }}
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_number }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      # - name: Cache composer cache
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-composer-cache
      #   with:
      #     path: ~/.composer/cache
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      # - name: Cache vendor folder
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-vendor
      #   with:
      #     path: ./vendor
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}

      # - name: Cache web folder
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-web
      #   with:
      #     path: ./web
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_number }}

      # - name: Cache drush folder
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-drush
      #   with:
      #     path: ./drush
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}

      # - name: prepare-environment-vars
      #   run: |
      #     source $BASH_ENV

      # - name: visual regression test
      #   run: ./.ci/test/visual-regression/run

      - name: Create File
        run: |
          touch /tmp/artifacts/bob.txt
          echo "Hello Bob" >> /tmp/artifacts/bob.txt

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: vrt-report
          path: /tmp/artifacts
